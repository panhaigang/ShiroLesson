# =======================  
# Shiro INI configuration  
# =======================  
  
[main]
  #认证不通过（用户输入密码账号登陆）
  authc.loginUrl = /login.html
  #授权不通过（没有某个角色和权限）
  roles.loginUrl=/login.html
  roles.unauthorizedUrl=/no.html
  
  perms.loginUrl=/login.html
  perms.unauthorizedUrl=/no.html
[users]  
# 设置用户信息  
# 语法是 username = password, roleName1, roleName2, …, roleNameN  
jiaozi = 123456,role1  
  
[roles]  
# 角色信息和角色拥有的权限  
#语法是 rolename = permissionDefinition1, permissionDefinition2, …, permissionDefinitionN  
#权限的语法 * 表示所有权限  一般语法是 权限类型.权限动作.权限的资源id  比如  user:delete:1 表示拥有删除1号用户的权限  user:delete:*表示删除所有用户权限  
admin = *  
role1 = user:query:*, user:delete:1  



# web中的url过滤    
#語法是  某個路徑  = 怎麼樣過濾1，過濾2   常用的過濾有  
#  anon 匿名用戶   
#  authc 表示用戶和密碼驗證過濾 類 org.apache.shiro.web.filter.authc.FormAuthenticationFilter 沒有登錄自動跳轉到登錄頁  
#  perms 是否擁有某些權限過濾 類 org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter 用法 perms["remote:invoke"]  
#   roles是否擁有某個角色   org.apache.shiro.web.filter.authz.RolesAuthorizationFilter  用法roles[administrator]  
#  user 是否是某個用戶 org.apache.shiro.web.filter.authc.UserFilter   
# 也可以在main中自定義filter url就可以應用 參考http://shiro.apache.org/web.html#programmatic-support  

[urls]  
# web中的url过滤  
/login.html=anon
/suc.jsp=authc
#访问role.html需要role2的角色
/role.html=roles[role2]
#/suc.jsp=perms[user:delete:2]